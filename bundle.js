System.register("test", [], function (exports_1, context_1) {
    "use strict";
    var testStr;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            exports_1("testStr", testStr = "houdini");
        }
    };
});
System.register("main", [], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    function eventWindowLoaded() {
        canvasApp();
    }
    function canvasApp() {
        var theCanvas = document.getElementById('canvas');
        var context = theCanvas.getContext('2d');
        var tileSheet = new Image();
        tileSheet.addEventListener('load', eventSheetLoaded, false);
        tileSheet.src = '../images/tanks_sheet.png';
        var mapIndexOffset = -1;
        var mapRows = 10;
        var mapCols = 10;
        var tileMap = [
            [32, 31, 31, 31, 1, 31, 31, 31, 31, 32],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [32, 1, 26, 1, 26, 1, 26, 1, 1, 32],
            [32, 26, 1, 1, 26, 1, 1, 26, 1, 32],
            [32, 1, 1, 1, 26, 26, 1, 26, 1, 32],
            [32, 1, 1, 26, 1, 1, 1, 26, 1, 32],
            [32, 1, 1, 1, 1, 1, 1, 26, 1, 32],
            [1, 1, 26, 1, 26, 1, 26, 1, 1, 1],
            [32, 1, 1, 1, 1, 1, 1, 1, 1, 32],
            [32, 31, 31, 31, 1, 31, 31, 31, 31, 32]
        ];
        function eventSheetLoaded() {
            drawScreen();
        }
        function drawScreen() {
            for (var rowCtr = 0; rowCtr < mapRows; rowCtr++) {
                for (var colCtr = 0; colCtr < mapCols; colCtr++) {
                    var tileId = tileMap[rowCtr][colCtr] + mapIndexOffset;
                    var sourceX = Math.floor(tileId % 8) * 32;
                    var sourceY = Math.floor(tileId / 8) * 32;
                    context.drawImage(tileSheet, sourceX, sourceY, 32, 32, colCtr * 32, rowCtr * 32, 32, 32);
                }
            }
        }
    }
    return {
        setters: [],
        execute: function () {
            window.addEventListener('load', eventWindowLoaded, false);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianMvdGVzdC50cyIsImpzL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztZQUFBLHFCQUFhLE9BQU8sR0FBRyxTQUFTLEVBQUM7Ozs7Ozs7SUNJakMsU0FBUyxpQkFBaUI7UUFDeEIsU0FBUyxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsU0FBUyxTQUFTO1FBQ2hCLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixDQUFBO1FBQ3RFLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFeEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQTtRQUMzQixTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzNELFNBQVMsQ0FBQyxHQUFHLEdBQUcsMkJBQTJCLENBQUE7UUFDM0MsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDdkIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ2hCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUNoQixJQUFJLE9BQU8sR0FBRztZQUNaLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3hDLENBQUE7UUFDRCxTQUFTLGdCQUFnQjtZQUN2QixVQUFVLEVBQUUsQ0FBQTtRQUNkLENBQUM7UUFDRCxTQUFTLFVBQVU7WUFDakIsS0FBSyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDL0MsS0FBSyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtvQkFDL0MsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLGNBQWMsQ0FBQTtvQkFDckQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO29CQUN6QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7b0JBQ3pDLE9BQU8sQ0FBQyxTQUFTLENBQ2YsU0FBUyxFQUNULE9BQU8sRUFDUCxPQUFPLEVBQ1AsRUFBRSxFQUNGLEVBQUUsRUFDRixNQUFNLEdBQUcsRUFBRSxFQUNYLE1BQU0sR0FBRyxFQUFFLEVBQ1gsRUFBRSxFQUNGLEVBQUUsQ0FDSCxDQUFBO2lCQUNGO2FBQ0Y7UUFDSCxDQUFDO0lBQ0gsQ0FBQzs7OztZQW5ERCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHRlc3RTdHIgPSBcImhvdWRpbmlcIjtcbiIsImltcG9ydCB7IHRlc3RTdHIgfSBmcm9tICcuL3Rlc3QnXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZXZlbnRXaW5kb3dMb2FkZWQsIGZhbHNlKVxuXG5mdW5jdGlvbiBldmVudFdpbmRvd0xvYWRlZCgpIHtcbiAgY2FudmFzQXBwKClcbn1cblxuZnVuY3Rpb24gY2FudmFzQXBwKCkge1xuICB2YXIgdGhlQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50XG4gIHZhciBjb250ZXh0ID0gdGhlQ2FudmFzLmdldENvbnRleHQoJzJkJylcblxuICB2YXIgdGlsZVNoZWV0ID0gbmV3IEltYWdlKClcbiAgdGlsZVNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBldmVudFNoZWV0TG9hZGVkLCBmYWxzZSlcbiAgdGlsZVNoZWV0LnNyYyA9ICcuLi9pbWFnZXMvdGFua3Nfc2hlZXQucG5nJ1xuICB2YXIgbWFwSW5kZXhPZmZzZXQgPSAtMVxuICB2YXIgbWFwUm93cyA9IDEwXG4gIHZhciBtYXBDb2xzID0gMTBcbiAgdmFyIHRpbGVNYXAgPSBbXG4gICAgWzMyLCAzMSwgMzEsIDMxLCAxLCAzMSwgMzEsIDMxLCAzMSwgMzJdLFxuICAgIFsxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXSxcbiAgICBbMzIsIDEsIDI2LCAxLCAyNiwgMSwgMjYsIDEsIDEsIDMyXSxcbiAgICBbMzIsIDI2LCAxLCAxLCAyNiwgMSwgMSwgMjYsIDEsIDMyXSxcbiAgICBbMzIsIDEsIDEsIDEsIDI2LCAyNiwgMSwgMjYsIDEsIDMyXSxcbiAgICBbMzIsIDEsIDEsIDI2LCAxLCAxLCAxLCAyNiwgMSwgMzJdLFxuICAgIFszMiwgMSwgMSwgMSwgMSwgMSwgMSwgMjYsIDEsIDMyXSxcbiAgICBbMSwgMSwgMjYsIDEsIDI2LCAxLCAyNiwgMSwgMSwgMV0sXG4gICAgWzMyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAzMl0sXG4gICAgWzMyLCAzMSwgMzEsIDMxLCAxLCAzMSwgMzEsIDMxLCAzMSwgMzJdXG4gIF1cbiAgZnVuY3Rpb24gZXZlbnRTaGVldExvYWRlZCgpIHtcbiAgICBkcmF3U2NyZWVuKClcbiAgfVxuICBmdW5jdGlvbiBkcmF3U2NyZWVuKCkge1xuICAgIGZvciAodmFyIHJvd0N0ciA9IDA7IHJvd0N0ciA8IG1hcFJvd3M7IHJvd0N0cisrKSB7XG4gICAgICBmb3IgKHZhciBjb2xDdHIgPSAwOyBjb2xDdHIgPCBtYXBDb2xzOyBjb2xDdHIrKykge1xuICAgICAgICB2YXIgdGlsZUlkID0gdGlsZU1hcFtyb3dDdHJdW2NvbEN0cl0gKyBtYXBJbmRleE9mZnNldFxuICAgICAgICB2YXIgc291cmNlWCA9IE1hdGguZmxvb3IodGlsZUlkICUgOCkgKiAzMlxuICAgICAgICB2YXIgc291cmNlWSA9IE1hdGguZmxvb3IodGlsZUlkIC8gOCkgKiAzMlxuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShcbiAgICAgICAgICB0aWxlU2hlZXQsXG4gICAgICAgICAgc291cmNlWCxcbiAgICAgICAgICBzb3VyY2VZLFxuICAgICAgICAgIDMyLFxuICAgICAgICAgIDMyLFxuICAgICAgICAgIGNvbEN0ciAqIDMyLFxuICAgICAgICAgIHJvd0N0ciAqIDMyLFxuICAgICAgICAgIDMyLFxuICAgICAgICAgIDMyXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==