System.register("test", [], function (exports_1, context_1) {
    "use strict";
    var testStr;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            exports_1("testStr", testStr = "houdini");
        }
    };
});
System.register("main", [], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    function eventWindowLoaded() {
        canvasApp();
    }
    function canvasApp() {
        var theCanvas = document.getElementById('canvas');
        var context = theCanvas.getContext('2d');
        var mouseX;
        var mouseY;
        var tileSheet = new Image();
        tileSheet.addEventListener('load', eventSheetLoaded, false);
        tileSheet.src = '../images/tanks_sheet.png';
        var imageData = context.createImageData(32, 32);
        function eventSheetLoaded() {
            startUp();
        }
        function startUp() {
            context.fillStyle = '#aaaaaa';
            context.fillRect(0, 0, 256, 256);
            drawTileSheet();
        }
        function drawTileSheet() {
            context.drawImage(tileSheet, 0, 0);
        }
        function highlightTile(tileId, x, y) {
            context.fillStyle = '#aaaaaa';
            context.fillRect(0, 0, 256, 128);
            drawTileSheet();
            imageData = context.getImageData(x, y, 32, 32);
            //loop through imageData.data. Set every 4th value to a new value
            for (var j = 3; j < imageData.data.length; j += 4) {
                imageData.data[j] = 128;
            }
            var startX = Math.floor(tileId % 8) * 32;
            var startY = Math.floor(tileId / 8) * 32;
            context.strokeStyle = 'red';
            context.strokeRect(startX, startY, 32, 32);
        }
        function onMouseMove(e) {
            mouseX = e.clientX - theCanvas.offsetLeft;
            mouseY = e.clientY - theCanvas.offsetTop;
        }
        function onMouseClick(e) {
            console.log('click: ' + mouseX + ',' + mouseY);
            if (mouseY < 128) {
                //find tile to highlight
                var col = Math.floor(mouseX / 32);
                var row = Math.floor(mouseY / 32);
                var tileId = row * 7 + (col + row);
                highlightTile(tileId, col * 32, row * 32);
            }
            else {
                var col = Math.floor(mouseX / 32);
                var row = Math.floor(mouseY / 32);
                context.putImageData(imageData, col * 32, row * 32);
            }
        }
        theCanvas.addEventListener('mousemove', onMouseMove, false);
        theCanvas.addEventListener('click', onMouseClick, false);
    }
    return {
        setters: [],
        execute: function () {
            window.addEventListener('load', eventWindowLoaded, false);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianMvdGVzdC50cyIsImpzL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztZQUFBLHFCQUFhLE9BQU8sR0FBRyxTQUFTLEVBQUM7Ozs7Ozs7SUNJakMsU0FBUyxpQkFBaUI7UUFDeEIsU0FBUyxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsU0FBUyxTQUFTO1FBQ2hCLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixDQUFBO1FBQ3RFLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFeEMsSUFBSSxNQUFNLENBQUE7UUFDVixJQUFJLE1BQU0sQ0FBQTtRQUNWLElBQUksU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUE7UUFDM0IsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUMzRCxTQUFTLENBQUMsR0FBRyxHQUFHLDJCQUEyQixDQUFBO1FBQzNDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRS9DLFNBQVMsZ0JBQWdCO1lBQ3ZCLE9BQU8sRUFBRSxDQUFBO1FBQ1gsQ0FBQztRQUVELFNBQVMsT0FBTztZQUNkLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1lBQzdCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDaEMsYUFBYSxFQUFFLENBQUE7UUFDakIsQ0FBQztRQUVELFNBQVMsYUFBYTtZQUNwQixPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUVELFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNqQyxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtZQUM3QixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ2hDLGFBQWEsRUFBRSxDQUFBO1lBQ2YsU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDOUMsaUVBQWlFO1lBQ2pFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNqRCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTthQUN4QjtZQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUN4QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDeEMsT0FBTyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUE7WUFDM0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUM1QyxDQUFDO1FBRUQsU0FBUyxXQUFXLENBQUMsQ0FBQztZQUNwQixNQUFNLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFBO1lBQ3pDLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUE7UUFDMUMsQ0FBQztRQUVELFNBQVMsWUFBWSxDQUFDLENBQUM7WUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQTtZQUM5QyxJQUFJLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQ2hCLHdCQUF3QjtnQkFDeEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUE7Z0JBQ2pDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFBO2dCQUNqQyxJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQyxhQUFhLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFBO2FBQzFDO2lCQUFNO2dCQUNMLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFBO2dCQUNqQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQTtnQkFDakMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUE7YUFDcEQ7UUFDSCxDQUFDO1FBRUQsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDM0QsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDMUQsQ0FBQzs7OztZQXBFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHRlc3RTdHIgPSBcImhvdWRpbmlcIjtcclxuIiwiaW1wb3J0IHsgdGVzdFN0ciB9IGZyb20gJy4vdGVzdCdcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZXZlbnRXaW5kb3dMb2FkZWQsIGZhbHNlKVxyXG5cclxuZnVuY3Rpb24gZXZlbnRXaW5kb3dMb2FkZWQoKSB7XHJcbiAgY2FudmFzQXBwKClcclxufVxyXG5cclxuZnVuY3Rpb24gY2FudmFzQXBwKCkge1xyXG4gIHZhciB0aGVDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnRcclxuICB2YXIgY29udGV4dCA9IHRoZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXHJcblxyXG4gIHZhciBtb3VzZVhcclxuICB2YXIgbW91c2VZXHJcbiAgdmFyIHRpbGVTaGVldCA9IG5ldyBJbWFnZSgpXHJcbiAgdGlsZVNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBldmVudFNoZWV0TG9hZGVkLCBmYWxzZSlcclxuICB0aWxlU2hlZXQuc3JjID0gJy4uL2ltYWdlcy90YW5rc19zaGVldC5wbmcnXHJcbiAgdmFyIGltYWdlRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKDMyLCAzMilcclxuXHJcbiAgZnVuY3Rpb24gZXZlbnRTaGVldExvYWRlZCgpIHtcclxuICAgIHN0YXJ0VXAoKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RhcnRVcCgpIHtcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNhYWFhYWEnXHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIDI1NiwgMjU2KVxyXG4gICAgZHJhd1RpbGVTaGVldCgpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmF3VGlsZVNoZWV0KCkge1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGlsZVNoZWV0LCAwLCAwKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGlnaGxpZ2h0VGlsZSh0aWxlSWQsIHgsIHkpIHtcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNhYWFhYWEnXHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIDI1NiwgMTI4KVxyXG4gICAgZHJhd1RpbGVTaGVldCgpXHJcbiAgICBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSh4LCB5LCAzMiwgMzIpXHJcbiAgICAvL2xvb3AgdGhyb3VnaCBpbWFnZURhdGEuZGF0YS4gU2V0IGV2ZXJ5IDR0aCB2YWx1ZSB0byBhIG5ldyB2YWx1ZVxyXG4gICAgZm9yIChsZXQgaiA9IDM7IGogPCBpbWFnZURhdGEuZGF0YS5sZW5ndGg7IGogKz0gNCkge1xyXG4gICAgICBpbWFnZURhdGEuZGF0YVtqXSA9IDEyOFxyXG4gICAgfVxyXG4gICAgdmFyIHN0YXJ0WCA9IE1hdGguZmxvb3IodGlsZUlkICUgOCkgKiAzMlxyXG4gICAgdmFyIHN0YXJ0WSA9IE1hdGguZmxvb3IodGlsZUlkIC8gOCkgKiAzMlxyXG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZWQnXHJcbiAgICBjb250ZXh0LnN0cm9rZVJlY3Qoc3RhcnRYLCBzdGFydFksIDMyLCAzMilcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGUpIHtcclxuICAgIG1vdXNlWCA9IGUuY2xpZW50WCAtIHRoZUNhbnZhcy5vZmZzZXRMZWZ0XHJcbiAgICBtb3VzZVkgPSBlLmNsaWVudFkgLSB0aGVDYW52YXMub2Zmc2V0VG9wXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvbk1vdXNlQ2xpY2soZSkge1xyXG4gICAgY29uc29sZS5sb2coJ2NsaWNrOiAnICsgbW91c2VYICsgJywnICsgbW91c2VZKVxyXG4gICAgaWYgKG1vdXNlWSA8IDEyOCkge1xyXG4gICAgICAvL2ZpbmQgdGlsZSB0byBoaWdobGlnaHRcclxuICAgICAgdmFyIGNvbCA9IE1hdGguZmxvb3IobW91c2VYIC8gMzIpXHJcbiAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKG1vdXNlWSAvIDMyKVxyXG4gICAgICB2YXIgdGlsZUlkID0gcm93ICogNyArIChjb2wgKyByb3cpXHJcbiAgICAgIGhpZ2hsaWdodFRpbGUodGlsZUlkLCBjb2wgKiAzMiwgcm93ICogMzIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgY29sID0gTWF0aC5mbG9vcihtb3VzZVggLyAzMilcclxuICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IobW91c2VZIC8gMzIpXHJcbiAgICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgY29sICogMzIsIHJvdyAqIDMyKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhlQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSlcclxuICB0aGVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk1vdXNlQ2xpY2ssIGZhbHNlKVxyXG59XHJcbiJdfQ==